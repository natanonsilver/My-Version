from tkinter import *  #Gui
import random  # the randomiser
from tkinter import messagebox  # this is for the message box

names = []  # the list
score = 0  #the list
asked = []  #the list


#this is for the questions and my answers for the quiz
the_questions_answers = {
    1: [
        "What is the battle royale game most popular?", 'Fortnite', 'PUBG',
        'H1Z1', 'Apex Legends', 'Fortnite', 1
    ],  #qn1
    2: [
        "Which Video Game is the most successful of all time?", 'Minecraft',
        'PUBG', 'GTA 5', 'Tetris', 'Minecraft', 1
    ],  #qn2
    3: [
        "What character is associated with the game Minecraft?", 'James',
        'Dale', 'Drake', 'Steve', 'Steve', 4
    ],  #qn3
    4: [
        "In fortnite what gives more health?", 'ChugJug', 'Instahealth',
        'Goonie', 'Summrs', 'ChugJug', 1
    ],  #qn4
    5: [
        "In Gta 5, what artist is not included ?", 'summrs', 'K.Dot', 'Drake',
        'MaxSteal', 'summrs', 1
    ],  #qn5
    6: [
        "In Call of duty what is the worst gun?", 'Pistol', 'Ak47u', 'Dracko',
        'Sniper', 'pistol', 1
    ],  #qn6
    7: [
        "In SmashBros what is the main charcters name?", 'Bowser', 'Mario',
        'Goonie', 'SoujaBoy', 'Mario', 2
    ],  #qn7
    8: [
        "What member is not in the call of duty group faze?", 'Rain', 'Razer',
        'Temp', 'Mastell', 'Mastell', 4
    ],  #qn8
    9: [
        "What game does slayworld belong too", 'BirdBidness', 'ReallyRich',
        'HiC', 'Draingang', 'ReallyRich', 2
    ],  #qn9
    10: [
        "In Saints Row, who betrays the main characters?", 'Izaya', 'Summrs',
        'Goonie', 'Kankan', 'Izaya', 1
    ],  #qn10
}


def randomq():  # this is for making all the question random
    global qnum
    qnum = random.randint(1, 10)  #the number of questions
    if qnum not in asked:
        asked.append(qnum)
    elif qnum in asked:
        randomq()


# the intro page
class StartWindow:
    def __init__(self, parent):
        background_color = "lightpink"  # the background colour

        self.quiz_frame = Frame(parent,
                                bg=background_color,
                                padx=200,
                                pady=250)
        self.quiz_frame.grid()

        self.question_heading = Label(self.quiz_frame,
                                 text="Video Game Quiz ",
                                 font=("courier new", "13", "bold"),
                                 bg="white")
        self.question_heading.grid(row=1, padx=20)  #the head of the quiz

        self.var1 = IntVar()

        self.user_icon = Label(self.quiz_frame,
                              text="Please Enter your Name: ",
                              font=("courier new", "18", "bold"),
                              bg="white")
        self.user_icon.grid(row=2, padx=20, pady=20)

        self.submit_box = Entry(self.quiz_frame)
        self.submit_box.grid(row=3, padx=20, pady=20)  #insert name here

        self.forward_button = Button(self.quiz_frame,
                                      text="Continue",
                                      font=("courier new", "13", "bold"),
                                      bg="white",
                                      command=self.name_group)
        self.forward_button.grid(row=4, padx=20,
                                  pady=20)  #the coontiue button

    def name_group(self):  #Gets the name
        name = self.submit_box.get()

        if name == '':
            messagebox.showerror('Please put name', ' Put name')
        elif len(name) > 20:  # so the name stays between 3 to 20
            messagebox.showerror('error has happened!',
                                 'Maximum amount of characters reached')
        elif len(name) < 2:  # to make sure name entered is between 2-15
            messagebox.showerror('Whoops an error has happened',
                                 ' This is the Min amount of characters')
        elif len(name) < 3:  # so the name stays between 3 to 20
            messagebox.showerror('Whoops an error has happened',
                                 'Sorry this aint enough charcters')
        elif name.isnumeric():
            messagebox.showerror('Whoops an error has happened',
                                 'Only letters')
        elif not name.replace(
                ' ', ''
        ).isalpha:  # to make sure that letters are entered not number
            messagebox.showerror('Whoops an error has happened',
                                 'No Foreign Symbols Try again')
        else:  # to make sure its letteres not anything else
            name = self.submit_box.get()
            names.append(name)  #adds the name to the list
            self.quiz_frame.destroy()  #destroys frame
            Play(root)  #take the user quiz page


# this is where the quiz starts and where the questions will be displayed
class Play:  #Quiz page
    def __init__(self, parent):
        background_color = "lightpink"  #the color of the background

        self.quiz_frame = Frame(parent, bg=background_color, padx=40, pady=40)
        self.quiz_frame.grid()

        randomq()  # random questions

        self.question_tag = Label(self.quiz_frame,
                                    text=the_questions_answers[qnum][0],
                                    font=("courier new", "18", "bold"),
                                    bg="white")
        self.question_tag.grid(row=0, padx=10, pady=10)  # question label

        self.var1 = IntVar()

        self.rb1 = Radiobutton(self.quiz_frame,
                               text=the_questions_answers[qnum][1],
                               font=("courier new", "12"),
                               bg="white",
                               value=1,
                               variable=self.var1,
                               pady=10)
        self.rb1.grid(row=1, sticky=W)  #button

        self.rb2 = Radiobutton(self.quiz_frame,
                               text=the_questions_answers[qnum][2],
                               font=("courier new", "12"),
                               bg="white",
                               value=2,
                               variable=self.var1,
                               pady=10)
        self.rb2.grid(row=2, sticky=W)  #button

        self.rb3 = Radiobutton(self.quiz_frame,
                               text=the_questions_answers[qnum][3],
                               font=("courier new", "12"),
                               bg="white",
                               value=3,
                               variable=self.var1,
                               pady=10)
        self.rb3.grid(row=3, sticky=W)  #button

        self.rb4 = Radiobutton(self.quiz_frame,
                               text=the_questions_answers[qnum][4],
                               font=("courier new", "12"),
                               bg="white",
                               value=4,
                               variable=self.var1,
                               pady=10)
        self.rb4.grid(row=4, sticky=W)  #button

        self.forward_button = Button(self.quiz_frame,
                                      text="Confrim",
                                      bg="white",
                                      command=self.trial_progression)
        self.forward_button.grid(row=6)

        self.leave_tab = Button(self.quiz_frame,
                                text="Leave",
                                bg="red",
                                command=self.conclusion_screen)
        self.leave_tab.place(x=500,y=250)  #leave button

        self.score_label = Label(text='score')
        self.score_label.grid(row=9)  #score system

    def questions_system(self):
        randomq()
        self.var1.set(0)
        self.question_tag.config(text=the_questions_answers[qnum][0])
        self.rb1.config(text=the_questions_answers[qnum][1])
        self.rb2.config(text=the_questions_answers[qnum][2])
        self.rb3.config(text=the_questions_answers[qnum][3])
        self.rb4.config(text=the_questions_answers[qnum][4])


#this tells the score

    def trial_progression(self):
        global score
        scr_tab = self.score_label
        choice = self.var1.get()
        if len(asked) > 9:  # this will show us the final question
            if choice == the_questions_answers[qnum][
                    6]:  # for index 6 it will show if its correct
                score += 1  # adds one point
                scr_tab.configure(
                    text=score)  # shows the new score if right or wrong
                self.forward_button.config(text="Confirm")  # confirm button
                self.conclusion_screen()  # it the end page when the quiz is over
            else:
                score += 0
                scr_tab.configure(text="The right answer was: " +
                                  the_questions_answers[qnum][5]
                                  )  #shows the result of the answer
                self.forward_button.config(text="Confirm")
                self.conclusion_screen()
                

        else:
            if choice == 0:
                self.forward_button.config(
                    text=
                    " Please Try Again, you didn't select an answer then submit again"
                )  #when the user has no selected the option this message shows up
                choice = self.var1.get()
            else:
                if choice == the_questions_answers[qnum][6]:
                    score += 1
                    scr_tab.configure(text=score)
                    self.forward_button.config(text="Confirm")
                    self.questions_system()

                else:
                    score += 0
                    scr_tab.configure(text="The correct answer was: " +
                                      the_questions_answers[qnum][5]
                                      )  #shows the result of the answer
                    self.forward_button.config(text="Confirm")
                    self.questions_system()

    def conclusion_screen(self):
        root.destroy()  #destroys quiz page
        name = names[0]
        open_Conclusion_object = Conclusion()  #opens end page


class Conclusion:  # the end page of the quiz
    def __init__(self):
        background_color = 'lightpink'  # The Background color
        global end_root
        end_root = Tk()
        end_root.title('Exit Box')  # title
        end_root.geometry('600x600')  #the size of the page

        self.end_frame = Frame(end_root,
                               width=700,
                               height=600,
                               bg=background_color)
        self.end_frame.grid(row=1)

        self.end_title = Label(end_root,
                               text='Appreciate trying the quiz',
                               font=('courier new', 22, 'bold'),
                               bg="white")  #heading
        self.end_title.place(x=70, y=35)  #location

        self.exit_button = Button(
            end_root,
            text='Exit',
            width=10,
            bg='white',
            font=('courier new', 12, 'bold'),
            command=self.close_End,
        )  # The exit button
        self.exit_button.place(x=260, y=200)  # Where the heading is

        self.list_tab = Label(end_root,
                              text='You did awesome ' + str(names),
                              font=('courier new', 12, 'bold'),
                              width=40,
                              bg="white")  #try again label
        self.list_tab.place(x=110, y=80)  #label location

        self.end_score = Label(end_root,
                               text='The Final score is ' + str(score),
                               font=('courier new', 12, 'bold'),
                               width=40,
                               bg="white")  #final score is displayed
        self.end_score.place(x=110, y=150)  #label location

    def close_End(self):
        self.end_frame.destroy()  #destroys end frame
        self.end_title.destroy()  #destorys end title
        self.exit_button.destroy()  #destroys exit button
        self.list_tab.destroy()
        end_root.destroy()  #ends quiz


if __name__ == "__main__":
    root = Tk()
    root.title("Video Game Quiz")  #title for the quiz
    quiz_instance = StartWindow(root)
    root.mainloop()
